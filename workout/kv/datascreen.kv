#:kivy 2.0.0

<DataScreen>:

    fig_display: fig_display
    card_layout: data_card_layout

    MDToolbar:
        title: "Data"
        id: toolbar
        specific_text_color: [.13,.13,.13,1]
        halign: 'center'
        pos_hint: {'top':1.0}
        elevation: 10

    MDBoxLayout:
        orientation: "vertical"
        size_hint: 1, None
        height: self.minimum_height
        y: root.height - toolbar.height - self.height

        ScrollView:
            size_hint_y: None
            height: root.height - toolbar.height
            spacing: 0

            MDBoxLayout:
                orientation: 'vertical'
                size_hint_y: None
                height: self.minimum_height
                id: data_card_layout
                spacing: 5
                padding: 5

                FigDisplay:
                    id: fig_display
                    size_hint_y: None
                    height: 550
                    on_press: app.change_screen(app.root.ids.data_sm, 'graph_screen')

                DataCardCalc:
                    name: 'this_week'
                    title: 'Sessions This Week'

                DataCardCalc:
                    name: 'sessions_per_week'
                    title: 'Average Weekly Sessions'

                DataCardCalc:
                    name: 'current'
                    title: 'Current Streak'

                DataCardCalc:
                    name: 'longest'
                    title: 'Longest Streak'

                DataCardButton:
                    title: 'View/edit sessions'
                    screen: 'view_sessions_screen'
                    
    

<DataCard>:
    size_hint_y: None
    height: 160
    padding: 10
    orientation: 'horizontal'

    left_container: left_container
    right_container: right_container

    MDBoxLayout:
        id: left_container
        orientation: 'horizontal'
        size_hint_x: .75
        pos_hint: {'right': 1, 'center_y': .5}

    MDBoxLayout:
        id: right_container
        orientation: 'horizontal'
        size_hint_x: .25
        pos_hint: {'right': 0, 'center_y': .5}


<DataLabel>:
    # text: root.title
    font_size: 40
    halign: 'center'  

<DataButton>:

    MDIconButton:
        icon: 'chevron-right'
        pos_hint: {'center_x': .5, 'center_y': .5}
        on_press: app.change_screen(app.root.ids.data_sm, 'view_sessions_screen')
    
        
<Starting>:
    orientation: 'vertical'
    
    MDLabel:
        text: 'Start:'
        halign: 'center'
        valign: 'center'
        size: self.parent.size
        text_size: self.size
    
    MDFlatButton:
        text: root.start
        width: self.parent.width
        font_style: 'Button'
        on_press: root._show_date_picker()

<Target>:
    orientation: 'vertical'
    target_button: target_button

    MDLabel:
        text: 'Target:'
        halign: 'center'
        valign: 'center'
        size: self.parent.size
        text_size: self.size
                
    MDFlatButton:
        id: target_button
        text: str(root.target)
        width: self.parent.width
        on_press: root._show_menu()

<Unit>:
    orientation: 'vertical'
    unit_button: unit_button

    MDLabel:
        text: 'Unit:'
        halign: 'center'
        valign: 'center'
        size: self.parent.size
        text_size: self.size
        
    MDFlatButton:
        id: unit_button
        text: root.unit
        width: self.parent.width
        on_press: root._show_menu()


<Calculation>:


    MDLabel:

        text: str(root.base_card.calculation)
        font_style: "Button"
        halign: "center"
        font_size: '50sp' if len(self.text) == 1 else '40sp'
        center: root.center


<CircleCalculation>:
    
    angle_start: -1
    angle_end: 
        max(self.base_card.calculation/self.base_card.target*360, 1) if self.base_card.target else 1

    canvas.before:
        Color:
            id: color
            rgb: root.line_color
    
        Line:
            width: dp(4)
            circle:
                (self.center_x, self.center_y, min(self.width, self.height)
                / 2, root.angle_start, root.angle_end)
        