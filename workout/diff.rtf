diff --git a/.DS_Store b/.DS_Store
deleted file mode 100644
index c703b9b..0000000
Binary files a/.DS_Store and /dev/null differ
diff --git a/.gitignore.txt b/.gitignore.txt
deleted file mode 100644
index 093cb92..0000000
--- a/.gitignore.txt
+++ /dev/null
@@ -1,73 +0,0 @@
-# Directories and files that cannot be commited to git
-
-# Byte-compiled
-__pycache__
-*.py[cod]
-*$py.class
-
-# C extensions
-*.so
-
-# Distribution / packaging
-.Python
-lib
-lib64
-parts
-sdist
-var
-wheels
-pip-wheel-metadata
-share/python-wheels
-develop-eggs
-eggs
-.eggs
-*.egg-info
-*.egg
-MANIFEST
-.installed.cfg
-downloads
-docs/_build
-build
-dist
-bin
-.buildozer
-
-# Logs
-*.log
-pip-log.txt
-pip-delete-this-directory.txt
-
-# Editors
-.vscode
-.ipynb_checkpoints
-*.swp
-# PyCharm
-.idea/*
-!/.idea/*.iml
-!/.idea/modules.xml
-!/.idea/vcs.xml
-!/.idea/runConfigurations
-
-# Environments
-venv
-.venv
-env
-.env
-.python-version
-
-# Temp / Cache
-cache
-.cache
-temp
-.temp
-.pytest_cache
-.coverage
-.DS_Store
-.dccache
-
-/kivymd/tools/release/*.zip
-/kivymd/tools/release/temp
-/kivymd/_version.py
-
-requirements.txt
-session_log.txt
\ No newline at end of file
diff --git a/workout/.DS_Store b/WorkoutApp_git/workout/.DS_Store
similarity index 86%
rename from workout/.DS_Store
rename to WorkoutApp_git/workout/.DS_Store
index 50fa0fc..2b402e5 100644
Binary files a/workout/.DS_Store and b/WorkoutApp_git/workout/.DS_Store differ
diff --git a/workout/.ipynb_checkpoints/Untitled-checkpoint.ipynb b/WorkoutApp_git/workout/.ipynb_checkpoints/Untitled-checkpoint.ipynb
similarity index 100%
rename from workout/.ipynb_checkpoints/Untitled-checkpoint.ipynb
rename to WorkoutApp_git/workout/.ipynb_checkpoints/Untitled-checkpoint.ipynb
diff --git a/WorkoutApp_git/workout/.vscode/launch.json b/WorkoutApp_git/workout/.vscode/launch.json
new file mode 100644
index 0000000..7aa381b
--- /dev/null
+++ b/WorkoutApp_git/workout/.vscode/launch.json
@@ -0,0 +1,19 @@
+{
+    // Use IntelliSense to learn about possible attributes.
+    // Hover to view descriptions of existing attributes.
+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+
+
+
+        {
+            "name": "Python: Current File",
+            "type": "python",
+            "request": "launch",
+            "program": "${file}",
+            "console": "integratedTerminal",
+            "justMyCode": true
+        }
+    ]
+}
\ No newline at end of file
diff --git a/workout/Untitled.ipynb b/WorkoutApp_git/workout/Untitled.ipynb
similarity index 100%
rename from workout/Untitled.ipynb
rename to WorkoutApp_git/workout/Untitled.ipynb
diff --git a/workout/__init__.py b/WorkoutApp_git/workout/__init__.py
similarity index 100%
rename from workout/__init__.py
rename to WorkoutApp_git/workout/__init__.py
diff --git a/workout/backend/__init__.py b/WorkoutApp_git/workout/backend/__init__.py
similarity index 100%
rename from workout/backend/__init__.py
rename to WorkoutApp_git/workout/backend/__init__.py
diff --git a/WorkoutApp_git/workout/backend/__pycache__/__init__.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/__init__.cpython-39.pyc
new file mode 100644
index 0000000..edfd377
Binary files /dev/null and b/WorkoutApp_git/workout/backend/__pycache__/__init__.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/backend/__pycache__/colors.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/colors.cpython-39.pyc
new file mode 100644
index 0000000..7cb1945
Binary files /dev/null and b/WorkoutApp_git/workout/backend/__pycache__/colors.cpython-39.pyc differ
diff --git a/workout/backend/__pycache__/config.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/config.cpython-39.pyc
similarity index 100%
rename from workout/backend/__pycache__/config.cpython-39.pyc
rename to WorkoutApp_git/workout/backend/__pycache__/config.cpython-39.pyc
diff --git a/WorkoutApp_git/workout/backend/__pycache__/database.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/database.cpython-39.pyc
new file mode 100644
index 0000000..d7767f5
Binary files /dev/null and b/WorkoutApp_git/workout/backend/__pycache__/database.cpython-39.pyc differ
diff --git a/workout/backend/__pycache__/datacalcfunctions.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/datacalcfunctions.cpython-39.pyc
similarity index 100%
rename from workout/backend/__pycache__/datacalcfunctions.cpython-39.pyc
rename to WorkoutApp_git/workout/backend/__pycache__/datacalcfunctions.cpython-39.pyc
diff --git a/WorkoutApp_git/workout/backend/__pycache__/datacarddata.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/datacarddata.cpython-39.pyc
new file mode 100644
index 0000000..e5e57ac
Binary files /dev/null and b/WorkoutApp_git/workout/backend/__pycache__/datacarddata.cpython-39.pyc differ
diff --git a/workout/backend/__pycache__/mapping.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/mapping.cpython-39.pyc
similarity index 91%
rename from workout/backend/__pycache__/mapping.cpython-39.pyc
rename to WorkoutApp_git/workout/backend/__pycache__/mapping.cpython-39.pyc
index 73bf3b9..7d9c486 100644
Binary files a/workout/backend/__pycache__/mapping.cpython-39.pyc and b/WorkoutApp_git/workout/backend/__pycache__/mapping.cpython-39.pyc differ
diff --git a/workout/backend/__pycache__/schedulemanager.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/schedulemanager.cpython-39.pyc
similarity index 89%
rename from workout/backend/__pycache__/schedulemanager.cpython-39.pyc
rename to WorkoutApp_git/workout/backend/__pycache__/schedulemanager.cpython-39.pyc
index fb316d7..4ea5d03 100644
Binary files a/workout/backend/__pycache__/schedulemanager.cpython-39.pyc and b/WorkoutApp_git/workout/backend/__pycache__/schedulemanager.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/backend/__pycache__/utils.cpython-39.pyc b/WorkoutApp_git/workout/backend/__pycache__/utils.cpython-39.pyc
new file mode 100644
index 0000000..c31d19a
Binary files /dev/null and b/WorkoutApp_git/workout/backend/__pycache__/utils.cpython-39.pyc differ
diff --git a/workout/backend/colors.py b/WorkoutApp_git/workout/backend/colors.py
similarity index 100%
rename from workout/backend/colors.py
rename to WorkoutApp_git/workout/backend/colors.py
diff --git a/workout/backend/config.py b/WorkoutApp_git/workout/backend/config.py
similarity index 100%
rename from workout/backend/config.py
rename to WorkoutApp_git/workout/backend/config.py
diff --git a/workout/backend/database.py b/WorkoutApp_git/workout/backend/database.py
similarity index 79%
rename from workout/backend/database.py
rename to WorkoutApp_git/workout/backend/database.py
index db1ddb0..55ee759 100644
--- a/workout/backend/database.py
+++ b/WorkoutApp_git/workout/backend/database.py
@@ -1,5 +1,4 @@
-
-from datetime import datetime, date
+import datetime
 from dateutil.relativedelta import relativedelta
 
 from firebase_admin import credentials, initialize_app, db
@@ -137,7 +136,7 @@ def get_start(period):
         '6 Months': relativedelta(months=+6),
         'Year' : relativedelta(years=+1),
     }
-    date = datetime.now()-delta[period]
+    date = datetime.datetime.now()-delta[period]
 
     return utils.parse_date(date, 'YYYY-MM-DD')
 
@@ -156,6 +155,16 @@ def get_plot_data(lift:str, period: str): #Change this to graph data
     if data: 
         return mapping.PlotData(data, period)
 
+
+def get_session_lifts(key:str)->list:
+    return [*db.reference(f"sessions/{key}/lifts").get()]
+
+def get_lift_session(key: str, lift):
+    return db.reference(f'completed_lifts/{lift}/{key}/sets').get()
+
+
+
+
 # connect_to_firebase()
 # data = get_plot_data('Rows', 'Month')
 
@@ -181,9 +190,11 @@ def register_workout_template(data: dict):
         'lifts': data['lifts']
         })
 
-def register_completed_lift(key, lift, sets):
+def register_completed_lift(key, lift, sets, date = None):
+    if not date:
+        date = datetime.datetime.now().isoformat()
     db.reference(f'completed_lifts/{lift}/{key}').set({
-            'date': datetime.now().isoformat(),
+            'date': date,
             'sets': sets 
             })
         
@@ -195,24 +206,27 @@ def register_new_lift(lift):
 def register_session_manual(m,d):
     db.reference('/sessions').push(
         {
-        'date': datetime(2022, m, d).isoformat()
+        'date': datetime.datetime(2022, m, d).isoformat()
         })
 
-def register_session()->str:
+def register_session(workout)->str:
     '''Returns the key generated from the firebase push for use in logging
     the rest of session info. This is done so all info generated from logging a
     session can be easily tracked down and deleted if needed
     '''
     new_post_ref = db.reference('/sessions').push(
         {
-        'date': datetime.now().isoformat()
+        'date': datetime.datetime.now().isoformat(),
+        'workout': workout
         })
     return new_post_ref.key
 
-def register_graph_data(key: str, lift: str, weight: int)->None:
+def register_graph_data(key: str, lift: str, weight: int, date = None)->None:
+    if not date:
+        date = datetime.date.today().isoformat()
     db.reference(f'graph_data/{lift}/{key}').set(
         {
-        'date': date.today().isoformat(),
+        'date': date,
         'weight' : weight 
         })
 
@@ -227,13 +241,20 @@ def update_session(key: str, lift: str):
         lift : True
         })
 
+def update_session_date(key: str, date: str):
+
+    db.reference(f'/sessions/{key}').update(
+        {
+        'date' : date
+        })
+
 def update_next_index(next):
     ref = db.reference('schedule')
     ref.update({'next': next})
 
 def update_last_completed(workout):
     db.reference('workout_templates/'+workout).update({
-            'last_completed': datetime.now().isoformat()
+            'last_completed': datetime.datetime.now().isoformat()
             })
 
 def update_data_card(name, key, value):
@@ -246,15 +267,53 @@ def update_data_card(name, key, value):
 def set_schedule(schedule: dict):
     db.reference('schedule').set(schedule)
 
-def set_data_card(name, d: dict)->None:
-    db.reference('/data_cards/'+name).set(d)
+def set_data_cards()->None:
+    db.reference('data_cards').set({
+    'this_week' : 
+    {
+    'name' : 'this_week',
+    'title' : 'Sessions This Week',
+    'start_date_str':'',
+    'unit' : '',
+    'circle' : True}
+    ,
+    'sessions_per_week' : 
+    {
+    'name': 'sessions_per_week',
+    'title': 'Average Weekly Sessions',
+    'unit': '',
+    'circle' : True,
+    },
+
+    'current' : 
+    {
+    'name' : 'current',
+    'title' : 'Current Streak',
+    'start_date_str' : '',
+    },
+    'longest' : {
+    'name' : 'longest',
+    'title' : 'Longest Streak',
+    },
+})
 
 ### DELETIONS ###
 
 def delete_template(id: str):
     db.reference(f"/workout_templates/{id}").delete()
 
+def delete_session(key):
+    db.reference(f"sessions/{key}").delete()
+    
+
+def delete_completed_lift(key, lift):
+    db.reference(f"completed_lifts/{lift}/{key}").delete()
+
+def delete_graph_data(key, lift):
+    db.reference(f"graph_data/{lift}/{key}").delete()
+
 if __name__ == '__main__':
+    set_data_cards()
     pass
 
     # connect_to_firebase()
@@ -266,6 +325,3 @@ if __name__ == '__main__':
     #     register_session_manual(m, d)
     # lift = "Bench Press"
 
-
-
-
diff --git a/workout/backend/datacalcfunctions.py b/WorkoutApp_git/workout/backend/datacalcfunctions.py
similarity index 100%
rename from workout/backend/datacalcfunctions.py
rename to WorkoutApp_git/workout/backend/datacalcfunctions.py
diff --git a/workout/backend/datacarddata.py b/WorkoutApp_git/workout/backend/datacarddata.py
similarity index 51%
rename from workout/backend/datacarddata.py
rename to WorkoutApp_git/workout/backend/datacarddata.py
index 541cc60..3f82e23 100644
--- a/workout/backend/datacarddata.py
+++ b/WorkoutApp_git/workout/backend/datacarddata.py
@@ -4,7 +4,6 @@ from datetime import date, datetime
 import backend.database as db
 
 
-
 @dataclass
 class DataCardData:
     name: str
@@ -15,30 +14,30 @@ class DataCardData:
     circle: bool = False
     
 
-data_card_data = {
-    'this_week' : DataCardData(
-        name = 'this_week',
-        title = 'Sessions This Week',
-        start_date_str='',
-        unit = '',
-        circle = True,
-    ),
-    'sessions_per_week' : DataCardData(
-        name = 'sessions_per_week',
-        title = 'Average Weekly Sessions',
-        unit = '',
-        circle = True,
-    ),
-    'current' : DataCardData(
-        name = 'current',
-        title = 'Current Streak',
-        start_date_str = '',
-    ),
-    'longest' : DataCardData(
-        name = 'longest',
-        title = 'Longest Streak',
-    ),
-}
+# data_card_data = {
+#     'this_week' : DataCardData(
+#         name = 'this_week',
+#         title = 'Sessions This Week',
+#         start_date_str='',
+#         unit = '',
+#         circle = True,
+#     ),
+#     'sessions_per_week' : DataCardData(
+#         name = 'sessions_per_week',
+#         title = 'Average Weekly Sessions',
+#         unit = '',
+#         circle = True,
+#     ),
+#     'current' : DataCardData(
+#         name = 'current',
+#         title = 'Current Streak',
+#         start_date_str = '',
+#     ),
+#     'longest' : DataCardData(
+#         name = 'longest',
+#         title = 'Longest Streak',
+#     ),
+# }
 
 
 def calculate(data_card):
@@ -58,54 +57,60 @@ def this_week(data_card)-> int:
 def current_sessions(data_card)-> int:
     """Calculate current streak of consecutive sessions where weekly target was reached each consecutive week"""
     sessions = db.get_sessions()
-    dates = [datetime.fromisoformat(v['date']).isocalendar() for k,v in sessions.items()]
-    dates.reverse()
-    this_week = datetime.today().isocalendar()[:2]
-    streak = 0
-    current_streak = 0
-    current = None
-    for date in dates:
-        if not current:
-            current = date
-        if current[:2] == date[:2]:
-            streak += 1
-            current_streak += 1
-        else:
-            if current_streak >= data_card.target and current.week - date.week == 1:
+    if sessions:
+        dates = [datetime.fromisoformat(v['date']).isocalendar() for k,v in sessions.items()]
+        dates.reverse()
+        this_week = datetime.today().isocalendar()[:2]
+        streak = 0
+        current_streak = 0
+        current = None
+
+        for date in dates:
+            if not current:
+                current = date
+            if current[:2] == date[:2]:
                 streak += 1
-                current_streak = 1
+                current_streak += 1
             else:
-                if current[:2] != this_week:
-                    return streak
-            
-        current = date      
-        
-def current_weeks(data_card)-> int: # Change this (current code is sessions). Return 0 streak if no weeks completed (as opposed to sessions)
+                if current_streak >= data_card.target and current.week - date.week == 1:
+                    streak += 1
+                    current_streak = 1
+                else:
+                    if current[:2] != this_week:
+                        return streak
+            current = date      
+    else: 
+        return 0
+
+def current_weeks(data_card)-> int: 
     """Calculate current streak of consecutive weeks where weekly target was reached each consecutive week"""
     sessions = db.get_sessions()
-    dates = [datetime.fromisoformat(v['date']).isocalendar() for k,v in sessions.items()]
-    dates.reverse()
-    this_week = datetime.today().isocalendar()
-    current_streak = 0
-    week_streak = 0
-    current_week = None
-    for date in dates:
-        if not current_week:
-            current_week = date
-        if current_week[:2] == date[:2]:
-            current_streak += 1
-        else:
-            if current_streak >= data_card.target and current_week.week - date.week == 1:
-                week_streak += 1
-                current_streak = 1
+    if sessions:
+        dates = [datetime.fromisoformat(v['date']).isocalendar() for k,v in sessions.items()]
+        dates.reverse()
+        this_week = datetime.today().isocalendar()
+        current_streak = 0
+        week_streak = 0
+        current_week = None
+        for date in dates:
+            if not current_week:
+                current_week = date
+            if current_week[:2] == date[:2]:
+                current_streak += 1
             else:
-                if current_week[:2] != this_week[:2]:
-                    return week_streak
-                else:
+                if current_streak >= data_card.target and current_week.week - date.week == 1:
+                    week_streak += 1
                     current_streak = 1
-            
-        current_week = date      
-        
+                else:
+                    if current_week[:2] != this_week[:2]:
+                        return week_streak
+                    else:
+                        current_streak = 1
+                
+            current_week = date      
+    else:
+        return 0
+
 
 def sessions_per_week(data_card)-> int:
     '''Calculate the average number of sessions per week since start date'''
@@ -121,29 +126,31 @@ def highest_weeks(data_card)-> int:  #This could maybe be improved?
     '''Calculate the highest number of consecutive weeks wherein weekly target was reached since start date'''
 
     sessions = db.get_sessions_since(data_card.start_date_str)
-    longest_streak = 0
-    week_streak = 0
-    current_streak = 0
-    current_week = None
-    for _, v in sessions.items():
-        iso_cal = datetime.fromisoformat(v['date']).isocalendar()
-        if not current_week: 
-            current_week = iso_cal
-        if iso_cal[:2] == current_week[:2]: 
-            current_streak += 1
-            if current_streak == data_card.target:
-                week_streak += 1
-            current_week = iso_cal
-        else:
-            if week_streak != 0:
-                if (iso_cal.week - current_week.week != 1) or (current_streak < data_card.target):
-                    if week_streak > longest_streak:
-                        longest_streak = week_streak
-                    week_streak = 0
-            current_streak = 1   
-            current_week = iso_cal         
-    return max(longest_streak, week_streak)
-
+    if sessions:
+        longest_streak = 0
+        week_streak = 0
+        current_streak = 0
+        current_week = None
+        for _, v in sessions.items():
+            iso_cal = datetime.fromisoformat(v['date']).isocalendar()
+            if not current_week: 
+                current_week = iso_cal
+            if iso_cal[:2] == current_week[:2]: 
+                current_streak += 1
+                if current_streak == data_card.target:
+                    week_streak += 1
+                current_week = iso_cal
+            else:
+                if week_streak != 0:
+                    if (iso_cal.week - current_week.week != 1) or (current_streak < data_card.target):
+                        if week_streak > longest_streak:
+                            longest_streak = week_streak
+                        week_streak = 0
+                current_streak = 1   
+                current_week = iso_cal         
+        return max(longest_streak, week_streak)
+    else: 
+        return 0
 
 def highest_sessions(data_card)-> int:  #This could maybe be improved?
     '''Calculate highest number of consecutive sessions where weekly target was reached each consecutive week since start date'''
diff --git a/workout/backend/db_manual.py b/WorkoutApp_git/workout/backend/db_manual.py
similarity index 100%
rename from workout/backend/db_manual.py
rename to WorkoutApp_git/workout/backend/db_manual.py
diff --git a/workout/backend/firebase_admin.json b/WorkoutApp_git/workout/backend/firebase_admin.json
similarity index 100%
rename from workout/backend/firebase_admin.json
rename to WorkoutApp_git/workout/backend/firebase_admin.json
diff --git a/workout/backend/mapping.py b/WorkoutApp_git/workout/backend/mapping.py
similarity index 100%
rename from workout/backend/mapping.py
rename to WorkoutApp_git/workout/backend/mapping.py
diff --git a/workout/backend/schedulemanager.py b/WorkoutApp_git/workout/backend/schedulemanager.py
similarity index 100%
rename from workout/backend/schedulemanager.py
rename to WorkoutApp_git/workout/backend/schedulemanager.py
diff --git a/workout/screens/__init__.py b/WorkoutApp_git/workout/backend/session_log.txt
similarity index 100%
rename from workout/screens/__init__.py
rename to WorkoutApp_git/workout/backend/session_log.txt
diff --git a/workout/backend/utils.py b/WorkoutApp_git/workout/backend/utils.py
similarity index 88%
rename from workout/backend/utils.py
rename to WorkoutApp_git/workout/backend/utils.py
index 1751586..8f52279 100644
--- a/workout/backend/utils.py
+++ b/WorkoutApp_git/workout/backend/utils.py
@@ -5,9 +5,11 @@ from datetime import datetime
 
 def parse_date(date: Union[datetime, str], format:str = 'Mon DD' ) -> str:
     """Convert datetime object to string in custom formats"""
+
     formats = {
         'YYYY-MM-DD' : '%Y-%m-%d',
-        'Mon DD' : '%b %d'
+        'Mon DD' : '%b %d',
+        'Day, Mon DD, YYYY': '%A, %b %d, %Y'
 }
     
     if isinstance(date, str):
diff --git a/workout/kv/addliftdialog.kv b/WorkoutApp_git/workout/kv/addliftdialog.kv
similarity index 100%
rename from workout/kv/addliftdialog.kv
rename to WorkoutApp_git/workout/kv/addliftdialog.kv
diff --git a/workout/kv/datascreen.kv b/WorkoutApp_git/workout/kv/datascreen.kv
similarity index 95%
rename from workout/kv/datascreen.kv
rename to WorkoutApp_git/workout/kv/datascreen.kv
index 70fcdac..e5f2b17 100644
--- a/workout/kv/datascreen.kv
+++ b/WorkoutApp_git/workout/kv/datascreen.kv
@@ -57,6 +57,10 @@
 
                 DataCardCalc:
                     name: 'longest'
+
+                DataCardButton:
+                    title: 'View/edit sessions'
+                    screen: 'view_sessions_screen'
     
 
 <DataCard>:
@@ -91,6 +95,7 @@
     MDIconButton:
         icon: 'chevron-right'
         pos_hint: {'center_x': .5, 'center_y': .5}
+        on_press: app.change_screen(app.root.ids.data_sm, root.screen)
     
         
 <Starting>:
diff --git a/WorkoutApp_git/workout/kv/edit.kv b/WorkoutApp_git/workout/kv/edit.kv
new file mode 100644
index 0000000..5d67e21
--- /dev/null
+++ b/WorkoutApp_git/workout/kv/edit.kv
@@ -0,0 +1,197 @@
+#:kivy 2.0.0
+
+
+<EditScreen>:
+
+    toolbar: toolbar
+    scroll_layout: scroll_layout
+
+    MDToolbar:
+        id: toolbar
+        left_action_items: [["chevron-left", lambda x: app.change_screen(manager=app.root.ids.data_sm, screen_name='view_sessions_screen', direction='right')]]
+        right_action_items: [["plus", lambda x: root.show_add_lift_dialog(), 'Add new lift'], ["check", lambda x: root.validate_record(), 'Log Lifts']]
+        specific_text_color: [.13,.13,.13,1]
+        pos_hint: {'top': 1}
+        elevation: 10
+
+    MDBoxLayout:
+        orientation: "vertical"
+        size_hint_y: None
+        height: root.height - toolbar.height
+        y: 0
+
+        MDRelativeLayout:
+            adaptive_height: True
+
+            EditableDateButton:
+                id: date_button
+                date_obj: root.date_obj
+                text: root.date_str
+                on_press: self.show_date_picker()
+                pos_hint: {'center_x': .5}
+                
+            MDIconButton:
+                icon: 'pencil'
+                icon_size: "10sp"
+                on_press: date_button.show_date_picker()
+                pos_hint: ({'right': 1})
+
+
+        ScrollView:
+            size_hint_y: None
+            height: root.height - toolbar.height - date_button.height
+            y: root.height-toolbar.height
+            
+            MDBoxLayout:
+                id: scroll_layout
+                orientation: 'vertical'
+                size_hint_y: None
+                height: self.minimum_height
+                spacing: 5
+                padding: 5
+
+
+<EditableDateButton>:
+    font_size: 50
+    background_normal: ''
+    background_color: .13, .13, .13, 1
+
+<EditableSessionCard>:
+    size_hint_y: None
+    height: self.row_height * (self.num_rows) + self.label_height + button_layout.height
+    orientation: 'vertical'
+    label_height: 75
+    row_height: 120
+
+    box: box
+
+    MDCardSwipeLayerBox:
+        padding: "8dp"
+        
+        canvas:
+            Color:
+                rgb: [.95, .57, .26, 1]
+            Rectangle:
+                pos: self.pos
+                size: self.size
+
+        MDIconButton:
+            icon: "trash-can"
+            pos_hint: {"center_y": .5}
+            on_release: root.remove()
+            disabled: True if root.open_progress < 0.1 else False
+    
+
+    MDCardSwipeFrontBox:
+        orientation: 'vertical'
+       
+        Label:
+            text: root.lift
+            font_size: 40
+            size_hint_y: None
+            height: root.label_height
+
+        MDSeparator:
+
+        MDBoxLayout:
+
+            id: box
+            orientation: 'vertical'
+
+            MDRelativeLayout:
+                id: button_layout
+                size_hint_y: None
+                height: 50
+
+                MDRectangleFlatIconButton:
+                    icon: 'plus'
+                    text: 'Add Set'
+                    text_color: [.95, .57, .26, 1]
+                    line_color: [0, 0, 0, 0]
+                    icon_color: [.95, .57, .26, 1]
+                    pos_hint: {'center_x': .5, 'center_y': .5}
+                    on_press: root._add_rep()
+                    
+
+<EditRow>:
+    pos_hint: {'top': 0}
+    reps: int(rep_field.text) if rep_field.text else 0
+    weight: int(weight_field.text) if weight_field.text else 0
+
+    MDBoxLayout:
+        adaptive_width: True
+        size_hint_y: None
+        height: 106
+        pos_hint: {'center_x': .5}
+        
+        MDTextField:
+            id: rep_field
+            halign: 'center'
+            size_hint: None, None
+            adaptive_width: True
+            text: '' if root.reps == 0 else str(root.reps)
+            hint_text: 'Reps'
+    
+
+        MDTextField:
+            id: weight_field
+            halign: 'center'
+            size_hint: None, None
+            adaptive_width: True
+            text: '' if root.weight == 0 else str(root.weight)
+            hint_text: 'Weight'
+            
+
+    MDIconButton:
+        icon: 'close'
+        theme_icon_color: "Custom"
+        icon_color: [.95, .57, .26, 1]
+        on_press: root.remove()
+        pos_hint: {'right': 1, 'top': .85}
+
+<AddLiftDialog>:
+    orientation: 'vertical'
+    size_hint_y: None
+    height: '300dp'
+
+    scroll_box: scroll_box
+
+    ScrollView:
+        MDBoxLayout:
+            id: scroll_box 
+            orientation: 'vertical'
+            size_hint_y: None
+            height: self.minimum_height
+           
+            spacing: "12dp"
+            
+    
+<AddLiftDialogRow>:
+    orientation: 'horizontal'
+    size_hint_y: None
+    height: self.minimum_height
+    
+    check: check
+    input: input
+
+    ItemConfirm:
+        text: root.lift
+        on_release: root.set_icon(check, input)
+        divider: None
+    
+        LeftCheckbox:
+            id: check
+            active: False
+
+    CreateWorkoutSetsInput:
+        id: input
+        hint_text: "# sets"
+        size_hint_x: 0
+        disabled: True
+
+
+<LeftCheckbox@ILeftBodyTouch+MDCheckbox>:
+     
+<ItemConfirm@OneLineAvatarIconListItem>:
+
+<CreateWorkoutSetsInput@MDTextField>:
diff --git a/workout/kv/graphscreen.kv b/WorkoutApp_git/workout/kv/graphscreen.kv
similarity index 92%
rename from workout/kv/graphscreen.kv
rename to WorkoutApp_git/workout/kv/graphscreen.kv
index 8506213..187d9b2 100644
--- a/workout/kv/graphscreen.kv
+++ b/WorkoutApp_git/workout/kv/graphscreen.kv
@@ -8,7 +8,7 @@
             pos: self.pos
             size: self.size
 
-    figdisplay: figdisplay
+    fig_display: fig_display
     lift_stack: lift_stack
     period_stack: period_stack
 
@@ -24,7 +24,7 @@
             elevation: 10
 
         FigDisplay:
-            id: figdisplay
+            id: fig_display
             size_hint_y: .7
 
         StackLayout:
diff --git a/workout/kv/homescreen.kv b/WorkoutApp_git/workout/kv/homescreen.kv
similarity index 100%
rename from workout/kv/homescreen.kv
rename to WorkoutApp_git/workout/kv/homescreen.kv
diff --git a/workout/kv/main.kv b/WorkoutApp_git/workout/kv/main.kv
similarity index 73%
rename from workout/kv/main.kv
rename to WorkoutApp_git/workout/kv/main.kv
index 15221df..969c4e2 100644
--- a/workout/kv/main.kv
+++ b/WorkoutApp_git/workout/kv/main.kv
@@ -1,16 +1,10 @@
 #:kivy 2.0.0
 #:include kv/selectionscreen.kv
 #:include kv/sessionscreen.kv
-
-
-
-#include kv/datascreen.kv
+#:include kv/datascreen.kv
 #:include kv/schedulescreen.kv
-
-
-
-#include kv/graphscreen.kv
-
+#:include kv/graphscreen.kv
+#:include kv/viewsessionsscreen.kv
 
 MDScreen:
 
@@ -41,14 +35,17 @@ MDScreen:
             ScreenManager:
                 id: data_sm
 
-                # DataScreen:
-                #     name: "data_screen"
-                #     id: data_screen
+                DataScreen:
+                    name: "data_screen"
+                    id: data_screen
 
-                # GraphScreen:
-                #     name: 'graph_screen'
-                #     id: graph_screen
+                GraphScreen:
+                    name: 'graph_screen'
+                    id: graph_screen
 
+                ViewSessionsScreen:
+                    name: 'view_sessions_screen'
+                    id: view_sessions_screen
 
         MDBottomNavigationItem:
             name: 'schedule'
diff --git a/workout/kv/scheduledialog.kv b/WorkoutApp_git/workout/kv/scheduledialog.kv
similarity index 100%
rename from workout/kv/scheduledialog.kv
rename to WorkoutApp_git/workout/kv/scheduledialog.kv
diff --git a/workout/kv/schedulescreen.kv b/WorkoutApp_git/workout/kv/schedulescreen.kv
similarity index 100%
rename from workout/kv/schedulescreen.kv
rename to WorkoutApp_git/workout/kv/schedulescreen.kv
diff --git a/WorkoutApp_git/workout/kv/scratch.kv b/WorkoutApp_git/workout/kv/scratch.kv
new file mode 100644
index 0000000..9a9e234
--- /dev/null
+++ b/WorkoutApp_git/workout/kv/scratch.kv
@@ -0,0 +1,15 @@
+#:kivy 2.0.0
+#:kivy 2.0.0
+#:include kv/viewsessionscreen.kv
+#:include kv/edit.kv
+
+
+
+MDScreen:
+         
+    ScreenManager:
+        id: workout_sm
+
+        ViewSessionScreen:
+
+        
diff --git a/workout/kv/selectionscreen.kv b/WorkoutApp_git/workout/kv/selectionscreen.kv
similarity index 100%
rename from workout/kv/selectionscreen.kv
rename to WorkoutApp_git/workout/kv/selectionscreen.kv
diff --git a/workout/kv/sessiondialogs.kv b/WorkoutApp_git/workout/kv/sessiondialogs.kv
similarity index 100%
rename from workout/kv/sessiondialogs.kv
rename to WorkoutApp_git/workout/kv/sessiondialogs.kv
diff --git a/workout/kv/sessionscreen.kv b/WorkoutApp_git/workout/kv/sessionscreen.kv
similarity index 92%
rename from workout/kv/sessionscreen.kv
rename to WorkoutApp_git/workout/kv/sessionscreen.kv
index 0826bff..0df13a3 100644
--- a/workout/kv/sessionscreen.kv
+++ b/WorkoutApp_git/workout/kv/sessionscreen.kv
@@ -1,4 +1,6 @@
 #:kivy 2.0.0
+MDScreen:
+    SessionScreen:
 
 <SessionScreen>:
 
@@ -11,7 +13,7 @@
         MDToolbar:
             id: toolbar
             left_action_items: [["chevron-left", lambda x: app.change_screen(manager=app.root.ids.workout_sm, screen_name='selection_screen', direction='right')]]
-            right_action_items: [["plus", lambda x: root._add_lift_dialog(), 'Add new lift'], ["check", lambda x: root.validate_record(), 'Log Lifts']]
+            right_action_items: [["plus", lambda x: root.show_add_lift_dialog(), 'Add new lift'], ["check", lambda x: root.validate_record(), 'Log Lifts']]
             specific_text_color: [.13,.13,.13,1]
             halign: 'center'
             elevation: 10
@@ -44,7 +46,7 @@
     label_height: 75
 
     box: box
-    
+
     Label:
         text: root.lift
         size_hint_y: None
@@ -53,13 +55,12 @@
     MDSeparator:
 
     MDBoxLayout:
-
         id: box
         orientation: 'horizontal'
         
                    
 <RecordLayout>:
-    size_hint: 1, 1
+    size_hint_x: .75
     stack: stack
     scroll_x: 1
 
@@ -74,11 +75,10 @@
     orientation: 'tb-rl'
     size_hint: None, 1
     width: 197
-    date: date
     
 
     MDLabel:
-        id: date
+        id: root.date
         size_hint: 1, None
         height: 115
         halign: 'center'
@@ -133,6 +133,7 @@
 
 
 <InputLayout>:
+
     orientation: 'tb-rl'
     size_hint_x: .25
     layout: layout
@@ -152,8 +153,8 @@
     orientation: 'horizontal'
     size_hint_y: None
     height: 125
-    reps: rep_field.text
-    weight: weight_field.text
+    reps: int(rep_field.text) if rep_field.text else 0
+    weight: int(weight_field.text) if weight_field.text else 0
 
     rep_field: rep_field
     weight_field: weight_field
diff --git a/workout/kv/test.kv b/WorkoutApp_git/workout/kv/test.kv
similarity index 100%
rename from workout/kv/test.kv
rename to WorkoutApp_git/workout/kv/test.kv
diff --git a/WorkoutApp_git/workout/kv/viewsessionsscreen.kv b/WorkoutApp_git/workout/kv/viewsessionsscreen.kv
new file mode 100644
index 0000000..bf522b9
--- /dev/null
+++ b/WorkoutApp_git/workout/kv/viewsessionsscreen.kv
@@ -0,0 +1,101 @@
+#:kivy 2.0.0
+#:include kv/edit.kv
+
+<ViewSessionsScreen>:
+
+    toolbar: toolbar
+    box: box
+
+    MDBoxLayout:
+        orientation: "vertical"
+        id: box
+        
+        MDToolbar:
+            id: toolbar
+            gitle: 'Sessions'
+            left_action_items: [["chevron-left", lambda x: app.change_screen(manager=app.root.ids.data_sm, screen_name='data_screen', direction='right')]]
+            right_action_items: [["plus", lambda x: root._add_lift_dialog(), 'Add new lift'], ["trash-can-outline", lambda x: root.delete_all(), 'Delete all Sessions']]
+            specific_text_color: [.13,.13,.13,1]
+            elevation: 10
+
+        
+        
+        
+<MyButton>:
+  
+    MDCardSwipeLayerBox:
+        padding: "8dp"
+
+        canvas:
+            Color:
+                rgb: [.95, .57, .26, 1]
+            Rectangle:
+                pos: self.pos
+                size: self.size
+
+        MDIconButton:
+            icon: "trash-can"
+            pos_hint: {"center_y": .5}
+            on_release: root.show_confirm_dialog()
+            disabled: True if root.open_progress < 0.1 else False
+
+    MDCardSwipeFrontBox:
+        TwoLineRightIconListItem:
+            text: root.date_str
+            secondary_text: root.workout
+            _no_ripple_effect: True
+
+            IconRightWidget:
+                icon: 'pencil'
+                user_font_size: '15sp'
+                pos_hint: {'center_x': .5, 'center_y': .5}
+                on_release: root.launch_edit_screen(app)
+
+
+
+<RV>:
+    viewclass: 'MyButton'
+
+    RecycleBoxLayout:
+        default_size: None, dp(56)
+        default_size_hint: 1, None
+        size_hint_y: None
+        height: self.minimum_height
+        orientation: 'vertical'
+        multiselect: True
+        touch_multiselect: True
+
+  
+
+<EditDialog>:
+    orientation: 'vertical'
+    adaptive_height: True
+
+    RelativeLayout:
+        adaptive_height: True
+        padding: 15
+        spacing: 15
+
+        EditableDateButton:
+            date_obj: root.date_obj
+            
+            pos_hint: {'center_x': .5}
+            text: root.date_str
+            on_press: self.show_date_picker()
+
+    MDBoxLayout:
+        orientation: 'horizontal'
+        adaptive_height: True
+            
+        MDTextField:
+            text: '15'
+            hint_text: '#'
+        
+        MDTextField:
+            text: '150'
+            hint_text: 'lbs'
+
+
+
+
+    
\ No newline at end of file
diff --git a/workout/kv/workoutdialog.kv b/WorkoutApp_git/workout/kv/workoutdialog.kv
similarity index 100%
rename from workout/kv/workoutdialog.kv
rename to WorkoutApp_git/workout/kv/workoutdialog.kv
diff --git a/workout/main.py b/WorkoutApp_git/workout/main.py
similarity index 64%
rename from workout/main.py
rename to WorkoutApp_git/workout/main.py
index 2824915..1918878 100644
--- a/workout/main.py
+++ b/WorkoutApp_git/workout/main.py
@@ -4,27 +4,34 @@ from kivy.lang import Builder
 from kivy.core.window import Window
 from kivy.properties import ObjectProperty, StringProperty
 from kivy.uix.screenmanager import ScreenManager
-from screens.sessionscreen import SessionScreen
-from screens.schedulescreen import ScheduleScreen, ScheduleCard
-from screens.selectionscreen import SelectionScreen
+from screens import datascreen
+from screens import schedulescreen
+from screens import sessionscreen
+from screens import graphscreen
+from screens import selectionscreen
+from screens import viewsessions
 from backend.mapping import WorkoutOptionInfo
 
 import backend.database as db
 
+
 def write_sessions()-> None:
     from datetime import datetime
 
     sessions = db.get_sessions()
     with open('backend/session_log.txt', 'w') as file:
-        for _, v in sessions.items():
-            date = datetime.fromisoformat(v['date'])
-            date_str = datetime.strftime(date, '%b %d, %Y')
-            file.write(date_str + '\n')
+        if sessions:
+            for _, v in sessions.items():
+                date = datetime.fromisoformat(v['date'])
+                date_str = datetime.strftime(date, '%b %d, %Y')
+                file.write(date_str + '\n')
+            else:
+                file.write(f'{datetime.now}: No sessions')
 
 class MainApp(MDApp): 
 
     screens = {}
-    scheduled: ScheduleCard = ObjectProperty()
+    scheduled: schedulescreen.ScheduleCard = ObjectProperty()
     scheduled_text = StringProperty()
     scheduled_string = StringProperty()
 
@@ -45,4 +52,7 @@ class MainApp(MDApp):
         manager.current = screen_name
 
 
-MainApp().run()
\ No newline at end of file
+MainApp().run()
+
+
+
diff --git a/WorkoutApp_git/workout/scratch copy.py b/WorkoutApp_git/workout/scratch copy.py
new file mode 100644
index 0000000..3702e76
--- /dev/null
+++ b/WorkoutApp_git/workout/scratch copy.py	
@@ -0,0 +1,31 @@
+from kivy.lang import Builder
+from kivymd.app import MDApp
+from kivy.core.window import Window
+from kivy.uix.screenmanager import ScreenManager
+
+
+from kivy.lang import Builder
+
+from screens.sessionscreen import SessionScreen
+
+
+class MainApp(MDApp): 
+    
+    def build(self):
+        self.theme_cls.theme_style = 'Dark'
+        self.theme_cls.primary_palette = "Cyan"
+        Window.size = (375, 740)
+        return Builder.load_file("kv/sessionscreen.kv")
+
+    def on_start(self):
+        pass
+
+    def change_screen(self, manager: ScreenManager, screen_name: str, direction:str = 'left'): ## use a setter here?
+        manager.transition.direction = direction
+        manager.current = screen_name
+
+
+if __name__ == '__main__':
+    MainApp().run()
+
+
diff --git a/workout/scratch.py b/WorkoutApp_git/workout/scratch.py
similarity index 53%
rename from workout/scratch.py
rename to WorkoutApp_git/workout/scratch.py
index edca1c1..373624b 100644
--- a/workout/scratch.py
+++ b/WorkoutApp_git/workout/scratch.py
@@ -1,8 +1,12 @@
 from kivy.lang import Builder
 from kivymd.app import MDApp
 from kivy.core.window import Window
+from kivy.uix.screenmanager import ScreenManager
 
-from screens import _sessionscreen
+
+from kivy.lang import Builder
+
+from screens import viewsessions
 
 
  
@@ -12,12 +16,17 @@ class MainApp(MDApp):
         self.theme_cls.theme_style = 'Dark'
         self.theme_cls.primary_palette = "Cyan"
         Window.size = (375, 740)
-        
-
         return Builder.load_file("kv/scratch.kv")
 
     def on_start(self):
         pass
 
+    def change_screen(self, manager: ScreenManager, screen_name: str, direction:str = 'left'): ## use a setter here?
+        manager.transition.direction = direction
+        manager.current = screen_name
+
+
 if __name__ == '__main__':
-    MainApp().run()
\ No newline at end of file
+    MainApp().run()
+
+
diff --git a/WorkoutApp_git/workout/screens/__init__.py b/WorkoutApp_git/workout/screens/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/WorkoutApp_git/workout/screens/__pycache__/__init__.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/__init__.cpython-39.pyc
new file mode 100644
index 0000000..6082314
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/__init__.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc
new file mode 100644
index 0000000..8aa63f4
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/datascreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/datascreen.cpython-39.pyc
new file mode 100644
index 0000000..141b5c7
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/datascreen.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/edit.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/edit.cpython-39.pyc
new file mode 100644
index 0000000..118137c
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/edit.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/graphscreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/graphscreen.cpython-39.pyc
new file mode 100644
index 0000000..17f3a06
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/graphscreen.cpython-39.pyc differ
diff --git a/workout/screens/__pycache__/schedulescreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/schedulescreen.cpython-39.pyc
similarity index 95%
rename from workout/screens/__pycache__/schedulescreen.cpython-39.pyc
rename to WorkoutApp_git/workout/screens/__pycache__/schedulescreen.cpython-39.pyc
index c3d14f2..fbae36a 100644
Binary files a/workout/screens/__pycache__/schedulescreen.cpython-39.pyc and b/WorkoutApp_git/workout/screens/__pycache__/schedulescreen.cpython-39.pyc differ
diff --git a/workout/screens/__pycache__/selectionscreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/selectionscreen.cpython-39.pyc
similarity index 66%
rename from workout/screens/__pycache__/selectionscreen.cpython-39.pyc
rename to WorkoutApp_git/workout/screens/__pycache__/selectionscreen.cpython-39.pyc
index ae74fbf..63ea965 100644
Binary files a/workout/screens/__pycache__/selectionscreen.cpython-39.pyc and b/WorkoutApp_git/workout/screens/__pycache__/selectionscreen.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/sessionedit.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/sessionedit.cpython-39.pyc
new file mode 100644
index 0000000..1805cf0
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/sessionedit.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/sessionscreen.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/sessionscreen.cpython-39.pyc
new file mode 100644
index 0000000..a270226
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/sessionscreen.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/viewsession.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/viewsession.cpython-39.pyc
new file mode 100644
index 0000000..3b6f369
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/viewsession.cpython-39.pyc differ
diff --git a/WorkoutApp_git/workout/screens/__pycache__/viewsessions.cpython-39.pyc b/WorkoutApp_git/workout/screens/__pycache__/viewsessions.cpython-39.pyc
new file mode 100644
index 0000000..ed4c3db
Binary files /dev/null and b/WorkoutApp_git/workout/screens/__pycache__/viewsessions.cpython-39.pyc differ
diff --git a/workout/screens/_sessionscreen.py b/WorkoutApp_git/workout/screens/_sessionscreen.py
similarity index 98%
rename from workout/screens/_sessionscreen.py
rename to WorkoutApp_git/workout/screens/_sessionscreen.py
index 04be032..53bdf94 100644
--- a/workout/screens/_sessionscreen.py
+++ b/WorkoutApp_git/workout/screens/_sessionscreen.py
@@ -1,9 +1,7 @@
-from types import SimpleNamespace
 import functools
-
+from types import SimpleNamespace
 
 from kivy.clock import Clock
-
 from kivy.properties import StringProperty, ObjectProperty, NumericProperty, BooleanProperty
 from kivymd.uix.boxlayout import MDBoxLayout
 from kivymd.uix.button import MDFlatButton, ButtonBehavior
@@ -16,6 +14,7 @@ from kivy.uix.scrollview import ScrollView
 from kivy.uix.stacklayout import StackLayout
 
 from backend import mapping 
+from backend.schedulemanager import schedule_manager
 import backend.mapping as mapping
 import backend.database as db
 
@@ -35,9 +34,7 @@ class SessionScreen(MDScreen):
         self.dialogs: dict[str:MDDialog] = {}
         self.input_layouts: list = None
         self.session_registered = False
-        # self.add_lift_dialog: MDDialog = None
-        # self.empty_dialog: MDDialog = None
-        # self.incomplete_dialog: MDDialog = None
+        self.session_key: str = None
      
         Clock.schedule_once(self._post_init)
 
@@ -378,8 +375,8 @@ class InputLayout(StackLayout):
 
 
 class InputRow(MDBoxLayout):
-    reps = StringProperty()
-    weight = StringProperty()
+    reps = NumericProperty()
+    weight = NumericProperty()
     empty = BooleanProperty(True)
     rep_field = ObjectProperty()
     set_field = ObjectProperty()
diff --git a/workout/screens/datascreen.py b/WorkoutApp_git/workout/screens/datascreen.py
similarity index 98%
rename from workout/screens/datascreen.py
rename to WorkoutApp_git/workout/screens/datascreen.py
index 51d7219..bcb17d7 100644
--- a/workout/screens/datascreen.py
+++ b/WorkoutApp_git/workout/screens/datascreen.py
@@ -39,7 +39,7 @@ class DataCard(MDCard):
     """Base card used on datascreen when no calculation to display"""
     pass
 
-class DataCardButton(DataCard): # No longer in use
+class DataCardButton(DataCard):
     """Data display card with button instead of calculation"""
     title = StringProperty()
     screen = StringProperty()
@@ -92,9 +92,9 @@ class DataCardCalc(DataCard):  #Composition over inheritance here?
 
     def calculate(self):
         if self.unit:
-            self.calculation = datacarddata.calc_functions[self.name][self.unit](self)
+            self.calculation = datacarddata.calc_functions[self.name][self.unit](self) #create datacardmanager to deal with this weirdness?
         else:
-            self.calculation = datacarddata._functions[self.name](self)
+            self.calculation = datacarddata.calc_functions[self.name](self)
 
     def on_calculation(self, *args):
         print('calculated')
diff --git a/workout/screens/figmanager.py b/WorkoutApp_git/workout/screens/figmanager.py
similarity index 100%
rename from workout/screens/figmanager.py
rename to WorkoutApp_git/workout/screens/figmanager.py
diff --git a/workout/screens/graphscreen.py b/WorkoutApp_git/workout/screens/graphscreen.py
similarity index 95%
rename from workout/screens/graphscreen.py
rename to WorkoutApp_git/workout/screens/graphscreen.py
index 542b2f3..1f4302c 100644
--- a/workout/screens/graphscreen.py
+++ b/WorkoutApp_git/workout/screens/graphscreen.py
@@ -21,7 +21,7 @@ import backend.database as db
 
 
 class GraphScreen(MDScreen):
-    figdisplay = ObjectProperty()
+    fig_display = ObjectProperty()
     lift_stack = ObjectProperty()
     period_stack = ObjectProperty()
     periods = ['Week', 'Month', '3 Months', '6 Months', 'Year', 'All Time']
@@ -34,7 +34,7 @@ class GraphScreen(MDScreen):
 
     def post_init(self, *args):
         self.mngr = FigManager()
-        self.mngr.register_display(self.figdisplay)
+        self.mngr.register_display(self.fig_display)
         self._add_lift_chips()
         self._add_period_chips()
         self._select_initial_chips()
@@ -116,12 +116,10 @@ class FigManager(Widget):
         super().__init__(**kwargs)
         self.displays: list[FigDisplay] = []
         self.figs = {}
-        self.lift, self.period = db.get_plot_initialization_info()
-        self.plot = ()
-        # self.bind(period = self.on_period)
-        # self.bind(lift = self.on_lift)
         self.bind(plot = self.on_plot)
-        self.set_fig(self.lift, self.period)
+        self.lift, self.period = db.get_plot_initialization_info() 
+ 
+        # self.set_fig(self.lift, self.period) #this is alreayd handle by on_period
 
     def on_period(self, *args):
         if self.lift and self.period:
@@ -136,7 +134,7 @@ class FigManager(Widget):
         display.set_display()
 
     def set_fig(self, lift, period):
-        if not self.figs.get((lift, period)):
+        if not (lift, period) in self.figs:
             self.figs[(lift, period)] = int(Figure(lift, period))
         plt.figure(self.figs[(lift, period)])
         self.plot = (lift, period)
@@ -150,7 +148,7 @@ class FigDisplay(ButtonBehavior, MDBoxLayout):
     def __init__(self, **kwargs):
         super().__init__(**kwargs)
         self.plot = None
-        # self.set_display()
+        self.set_display()
         
     def set_display(self):
         if self.plot:
diff --git a/workout/screens/homescreen.py b/WorkoutApp_git/workout/screens/homescreen.py
similarity index 100%
rename from workout/screens/homescreen.py
rename to WorkoutApp_git/workout/screens/homescreen.py
diff --git a/workout/screens/schedulescreen.py b/WorkoutApp_git/workout/screens/schedulescreen.py
similarity index 100%
rename from workout/screens/schedulescreen.py
rename to WorkoutApp_git/workout/screens/schedulescreen.py
diff --git a/workout/screens/selectionscreen.py b/WorkoutApp_git/workout/screens/selectionscreen.py
similarity index 98%
rename from workout/screens/selectionscreen.py
rename to WorkoutApp_git/workout/screens/selectionscreen.py
index bfd432b..1ef44d7 100644
--- a/workout/screens/selectionscreen.py
+++ b/WorkoutApp_git/workout/screens/selectionscreen.py
@@ -36,11 +36,9 @@ class SelectionScreen(MDScreen):
                 next_option = option
         self.options_layout.add_widget(WorkoutOptionCard(next_option), len(self.options_layout.children))
         
-
-    # def _add_template_card(self):
-
+        
     def show_new_workout_dialog(self):
-        if not self.dialogs.get('new_template'):
+        if not self.dialogs.get('new_template'): # fix this
             Builder.load_file('kv/workoutdialog.kv')
         self.dialogs['new_template'] = MDDialog(
             title="Create New Workout",
diff --git a/WorkoutApp_git/workout/screens/sessionedit.py b/WorkoutApp_git/workout/screens/sessionedit.py
new file mode 100644
index 0000000..70acb98
--- /dev/null
+++ b/WorkoutApp_git/workout/screens/sessionedit.py
@@ -0,0 +1,365 @@
+import functools
+
+from kivy.clock import Clock
+from kivy.properties import ObjectProperty, StringProperty, NumericProperty, ListProperty, BooleanProperty
+from kivymd.uix.button import MDFlatButton, MDRectangleFlatButton
+from kivy.uix.button import Button
+from kivymd.uix.boxlayout import MDBoxLayout
+from kivymd.uix.dialog import MDDialog
+from kivymd.uix.relativelayout import MDRelativeLayout
+from kivymd.uix.card import MDCardSwipe
+from kivymd.uix.picker import MDDatePicker
+from kivymd.uix.screen import MDScreen
+
+from kivymd.uix.textfield import MDTextField
+
+from backend import utils
+import backend.database as db
+
+
+class EditScreen(MDScreen):
+    toolbar = ObjectProperty()
+    date_label = ObjectProperty()
+    date_obj = ObjectProperty()
+    date_str = StringProperty()
+    scroll_layout = ObjectProperty()
+    workout = StringProperty()
+    lifts = ObjectProperty()
+    
+    def __init__(
+            self, key: str, date_str: str, date_obj, 
+            workout: str, lifts: dict, **kw):
+        super().__init__(**kw)
+        self.dialogs = {}
+        self.name: str = key
+        self.key: str = key
+        self.workout: str = workout
+        self.date_str: str = date_str
+        self.date_obj = date_obj
+
+        self.lifts: dict[str:bool] = lifts
+        Clock.schedule_once(self._post_init)
+
+    def _post_init(self, dt):
+        self.toolbar.title = self.workout
+        for lift in self.lifts:
+            self.scroll_layout.add_widget(EditableSessionCard(lift, self.key))
+
+    def on_date_obj(self, *args):
+        if self.date_obj:
+            self.date_str = utils.parse_date(self.date_obj, 'Day, Mon DD, YYYY')
+
+
+    def add_lift(self):
+        print('Add lift')
+
+    def show_add_lift_dialog(self):
+        key = 'new_lift'
+        
+        self.dialogs[key] = MDDialog(
+        title="Add Lift to Session",
+        type="custom",
+        content_cls = AddLiftDialog(self.lifts),
+        buttons=[
+            MDFlatButton(
+                text="DISCARD",
+                on_release=functools.partial(self._close_dialog, key)
+            ),
+            MDFlatButton(
+                text="ADD", 
+                # on_release=self.register_workout_template
+                on_release=self._process_new_lift_dialog
+            ),
+        ],
+    )
+        self.dialogs[key].open()
+
+    def _close_dialog(self, key, instance=None):
+        self.dialogs[key].dismiss()
+
+    def _process_new_lift_dialog(self, instance, *args):
+        data = self.dialogs['new_lift'].content_cls.get_input_data()
+        for k, v in data.items():
+            self.scroll_layout.add_widget(EditableSessionCard(k, self.key, sets = v))
+            self.lifts[k] = True
+
+        self._close_dialog('new_lift')
+
+    def validate_record(self, *args):
+        self.cards = [child for child in self.scroll_layout.children]
+        
+        if all([card.is_empty() for card in self.cards]): #Count the trues here to avoid another is_empty check?
+            self._empty_dialog()
+            return
+        
+        incomplete_found = False
+        empty_found = False
+
+        for card in self.cards:
+            if not incomplete_found: 
+                if card.is_incomplete():
+                    incomplete_found = True
+            if not empty_found:
+                if card.is_empty():
+                    empty_found = True
+
+        if incomplete_found or empty_found:
+            self._incomplete_dialog(incomplete_found, empty_found)
+            return
+
+        self._log_lifts()
+
+    def _empty_dialog(self):
+        key = 'all empty'
+        if not key in self.dialogs:
+            self.dialogs[key] = MDDialog(
+                text="No info to log",
+                buttons=[
+                    MDFlatButton(
+                        text="OK",
+                        theme_text_color="Custom",
+                        on_release = functools.partial(self._close_dialog, key)
+                    )
+                ]
+            )
+        self.dialogs[key].open()
+
+    def _incomplete_dialog(self, incomplete, empty):
+        key = 'incomplete'
+        text = ''
+        if empty:
+            text = 'Some records are empty and will not be logged.'
+        if incomplete:
+            text += '\nSome records are incomplete.'
+
+        self.dialogs[key] = MDDialog(
+            text=text,
+            buttons=[
+                MDFlatButton(
+                    text="CANCEL",
+                    theme_text_color="Custom",
+                    on_release = functools.partial(self._close_dialog, key)
+                ),
+                MDFlatButton(
+                    text="PROCEED",
+                    theme_text_color="Custom",
+                    on_release = functools.partial(self._proceed, key)
+                )
+            ]
+        )
+        self.dialogs[key].open()
+        
+    def _success_dialog(self):
+        key = 'success'
+        if not key in self.dialogs:
+            self.dialogs[key] = MDDialog(
+                text="Logged successfully",
+                buttons=[
+                    MDFlatButton(
+                        text="OK",
+                        theme_text_color="Custom",
+                        on_release = functools.partial(self._close_dialog, key)
+                    ),
+                ]
+            )
+        self.dialogs[key].open()
+
+    def _proceed(self, key, instance):
+        self._close_dialog(key)
+        self._log_lifts()
+
+    def _log_lifts(self, instance = None):
+        db.update_session_date(self.key, self.date_obj.isoformat())
+        for card in self.cards:
+            if not card.is_empty():
+                card.log_lift()
+
+        # if validate:
+        #     if not self.validate_template(data):
+        #         return
+        # db.register_workout_template(data)
+        # new_template = db.get_latest_workout_template()
+        # self.options_layout.add_widget(
+        #     WorkoutOptionCard(new_template), len(self.options_layout.children))
+        # self.dialogs['new_template'].dismiss()
+
+class EditableDateButton(Button):
+    date_obj = ObjectProperty()
+
+    def __init__(self, **kwargs):
+        super().__init__(**kwargs)
+        Clock.schedule_once(self._post_init)
+
+    def _post_init(self, *args):
+        self.bind(date_obj = self.parent.parent.setter('date_obj'))
+
+    def show_date_picker(self):
+            date_dialog = MDDatePicker(
+                year=self.date_obj.year,
+                month=self.date_obj.month,
+                day=self.date_obj.day,
+                min_year = 2020,
+            )
+            date_dialog.bind(on_save=self._on_save)
+            date_dialog.open()
+
+        
+    def _on_save(self, instance, value, range):
+        if not self.date_obj == value:
+            self.date_obj = value
+    
+           
+class EditableSessionCard(MDCardSwipe):
+    lift = StringProperty()
+    num_rows = NumericProperty()
+    box = ObjectProperty()
+
+    def __init__(self, lift, key, sets = None, **kwargs):
+        super().__init__(**kwargs)
+        self.lift = lift
+        self.key = key
+        self.rows = []
+        self.dialogs = {}
+        self.box.bind(children= self._set_num_rows) 
+        self.session_screen = None
+        
+        if not sets:
+            data = db.get_lift_session(key, lift)
+            self.num_rows = len(data)
+            for row in data:
+                self.box.add_widget(EditRow(row), 1) #Using ** to expand row here doesn't work?
+        else:
+            self.num_rows = sets
+            for row in range(sets):
+                self.box.add_widget(EditRow(),1)
+
+        Clock.schedule_once(self._post_init)
+
+    def _post_init(self, dt):
+        self.session_screen = self.parent.parent.parent.parent
+
+    def _add_rep(self):
+        self.box.add_widget(EditRow(), 1)
+        print("add rep")
+    
+    def _set_num_rows(self, instance, children):
+        self.num_rows = len(children)-1
+
+    def remove(self):
+        del self.session_screen.lifts[self.lift]
+        self.parent.remove_widget(self)
+
+    def is_empty(self):
+        self.rows = [child for child in self.box.children if isinstance(child, EditRow)]
+        return True if all([row.is_empty() for row in self.rows]) else False
+    
+    def is_incomplete(self):
+        return True if any([row.is_empty() for row in self.rows]) else False
+
+    def log_lift(self):
+
+        sets = [] #are these registered in reverse order? I think so
+        max = 0
+        for row in self.rows:
+            sets.append(row.get_dict())
+            if row.weight:
+                weight = row.weight
+                if weight > max:
+                    max = weight
+        
+        date = self.session_screen.date_obj.isoformat()
+        db.update_session(self.key, self.lift)
+        db.register_completed_lift(self.key, self.lift, sets, date)
+        db.register_graph_data(self.key, self.lift, max, date)
+
+        self._success_dialog()
+        #Delete the screen so reclicking generates a new one
+
+    def _success_dialog(self):
+        key = 'success'
+        if not key in self.dialogs:
+            self.dialogs[key] = MDDialog(
+                text="Record updated succesfully",
+                buttons=[
+                    MDFlatButton(
+                        text="OK",
+                        theme_text_color="Custom",
+                        on_release = functools.partial(self._close_dialog, key)
+                    ),
+                ]
+            )
+        self.dialogs[key].open()
+
+    def _close_dialog(self, key, instance):
+        self.dialogs[key].dismiss()
+
+class EditRow(MDRelativeLayout):
+    reps = NumericProperty()
+    weight = NumericProperty()
+    
+    def __init__(self, row = None) -> None: 
+        super().__init__()
+        if row: 
+            self.reps = row['reps']
+            self.weight = row['weight']
+
+    def is_empty(self):
+        return False if self.reps else True
+
+    def get_dict(self):
+        try:
+            return {
+                'reps': int(self.reps), 
+                'weight': int(self.weight) if self.weight else 0}
+        except ValueError:
+            return None
+    
+
+    def remove(self):
+        if self.parent.parent.parent.num_rows == 1:
+            session_card = self.parent.parent.parent
+            session_card.remove()
+        else:
+            self.parent.remove_widget(self)
+        
+        print('remove row')
+
+
+class AddLiftDialog(MDBoxLayout):
+    scroll_box = ObjectProperty()
+
+    def __init__(self, lifts: dict, **kwargs):
+        super().__init__(**kwargs)
+        self.rows: list[AddLiftdialogRow] = []
+        for lift in db.get_lifts():
+            if lift not in lifts:
+                self.scroll_box.add_widget(AddLiftdialogRow(lift))
+
+    def get_input_data(self)-> dict[str:int]:
+        
+        return {(row.lift if row.lift else None) : 
+                (int(row.input.text) if row.input.text else 1) 
+                for row in self.scroll_box.children if row.check.active}
+        
+        
+class AddLiftdialogRow(MDBoxLayout):
+    lift = StringProperty()
+    check = ObjectProperty()
+    input = ObjectProperty()
+
+    def __init__(self, lift, **kwargs):
+        super().__init__(**kwargs)
+        self.lift = lift
+    
+    def set_icon(self, instance_check, instance_input):
+        instance_check.active = not instance_check.active
+        instance_input.disabled = not instance_input.disabled
+        
+        if instance_input.disabled == True: instance_input.text = "" 
+        
+        if instance_input.size_hint_x == 0:
+            instance_input.size_hint_x = .2
+        else:
+            instance_input.size_hint_x = 0
+
+
diff --git a/workout/screens/sessionscreen.py b/WorkoutApp_git/workout/screens/sessionscreen.py
similarity index 94%
rename from workout/screens/sessionscreen.py
rename to WorkoutApp_git/workout/screens/sessionscreen.py
index c927d8d..0eb6786 100644
--- a/workout/screens/sessionscreen.py
+++ b/WorkoutApp_git/workout/screens/sessionscreen.py
@@ -1,20 +1,16 @@
-
-from types import SimpleNamespace
 import functools
+from types import SimpleNamespace
 
-from kivy.lang import Builder
 from kivy.clock import Clock
-from kivymd.app import MDApp
 from kivy.properties import StringProperty, ObjectProperty, NumericProperty, BooleanProperty
 from kivymd.uix.boxlayout import MDBoxLayout
-from kivymd.uix.button import MDIconButton, MDFlatButton, ButtonBehavior
+from kivymd.uix.button import MDFlatButton, ButtonBehavior
 from kivymd.uix.card import MDCard
 from kivymd.uix.dialog import MDDialog
 from kivy.uix.label import Label
 from kivymd.uix.relativelayout import MDRelativeLayout
 from kivymd.uix.screen import MDScreen
 from kivy.uix.scrollview import ScrollView
-from kivymd.uix.stacklayout import MDStackLayout
 from kivy.uix.stacklayout import StackLayout
 
 from backend import mapping 
@@ -22,15 +18,19 @@ from backend.schedulemanager import schedule_manager
 import backend.mapping as mapping
 import backend.database as db
 
+option = db.get_latest_workout_template()
 
 class SessionScreen(MDScreen):
     workout_info = ObjectProperty()
     toolbar = ObjectProperty()
     layout = ObjectProperty()
 
-    def __init__(self, workout_info: mapping.WorkoutOptionInfo, **kwargs):
+    def __init__(self, workout_info: mapping.WorkoutOptionInfo = None, **kwargs):
         super().__init__(**kwargs)
+        if not workout_info:
+            workout_info = option
         self.workout_info = workout_info
+        self.title = workout_info.title
         self.name: str = self.workout_info.id #For registration with ScreenManager
         self.dialogs: dict[str:MDDialog] = {}
         self.lift_cards: list = [] #Keep this or iterate through layout.children
@@ -39,7 +39,7 @@ class SessionScreen(MDScreen):
         Clock.schedule_once(self._post_init)
 
     def _post_init(self, dt):
-        self.toolbar.title = self.workout_info.title
+        self.toolbar.title = self.title
         for lift, sets in self.workout_info.lift_info_dict.items():
             self.layout.add_widget(LiftCard(lift, sets))
         self.input_layouts = [card.input_layout for card in self.layout.children]
@@ -132,7 +132,7 @@ class SessionScreen(MDScreen):
             if not layout.is_empty():
                 layout.log_lift()
 
-    def _add_lift_dialog(self):
+    def show_add_lift_dialog(self):
         key = 'lift'
         if not key in self.dialogs:
             self.dialogs[key] =  MDDialog(
@@ -226,11 +226,11 @@ class RecordLayout(ScrollView):
     
 
 class RecordColumn(StackLayout):
-    date = ObjectProperty()
+    date = StringProperty()
 
     def  __init__(self, session_info: mapping.LiftSessionRecord, **kwargs) -> None:
         super().__init__(**kwargs)
-        self.date.text = session_info.date
+        self.date = session_info.date
         for set in session_info.sets:
             self.add_widget(RecordLabel(set))
 
@@ -242,9 +242,9 @@ class RecordLabel(Label):
         self.text = self._format_set(set)
 
     def _format_set(self, set:dict)->str:
-        if set['weight'] == '':
-            return set['reps']
-        return f"{set['reps']}x{set['weight']}"
+        if set['weight'] == 0: 
+            return str(set['reps'])
+        return f"{str(set['reps'])}x{str(set['weight'])}"
 
 class ColumnSpacer(MDBoxLayout):
     pass
@@ -337,7 +337,7 @@ class InputLayout(StackLayout):
         for row in self.input_rows:
             sets.append(row.get_dict())
             if row.weight:
-                weight = int(row.weight)
+                weight = row.weight
                 if weight > max:
                     max = weight
             for field in [row.rep_field, row.weight_field]:
@@ -347,7 +347,7 @@ class InputLayout(StackLayout):
         session_screen = self.parent.parent.parent.parent.parent.parent
         
         if not session_screen.session_key:
-            session_screen.session_key = db.register_session()
+            session_screen.session_key = db.register_session(session_screen.title)
             db.update_last_completed(session_screen.name)
 
             if session_screen.workout_info.title == schedule_manager.next_name:
@@ -381,14 +381,17 @@ class InputLayout(StackLayout):
 
 
 class InputRow(MDBoxLayout):
-    reps = StringProperty()
-    weight = StringProperty()
+    reps = NumericProperty()
+    weight = NumericProperty()
     empty = BooleanProperty(True)
     rep_field = ObjectProperty()
     set_field = ObjectProperty()
 
     def on_reps(self, *args):
         self.empty = self._is_empty()
+ 
+    # def on_reps(self, *args):  -- Test and maybe use this now that not requiring wieght
+    #     self.empty = False if self.reps else True
 
     def on_weight(self, *args):
         self.empty = self._is_empty()
@@ -408,8 +411,8 @@ class InputRow(MDBoxLayout):
     def get_dict(self):
         try:
             return {
-                'reps': int(self.reps), 
-                'weight': int(self.weight) if self.weight else 0}
+                'reps': self.reps,
+                'weight': self.weight if self.weight else 0}
         except ValueError:
             return None
 
diff --git a/WorkoutApp_git/workout/screens/viewsessions.py b/WorkoutApp_git/workout/screens/viewsessions.py
new file mode 100644
index 0000000..f17ddca
--- /dev/null
+++ b/WorkoutApp_git/workout/screens/viewsessions.py
@@ -0,0 +1,143 @@
+from __future__ import annotations
+from datetime import datetime
+
+import functools
+from kivy.clock import Clock
+from kivymd.uix.card import MDCardSwipe
+from kivy.uix.recycleview import RecycleView
+from kivy.uix.recycleview.views import RecycleDataViewBehavior
+from kivy.uix.label import Label
+from kivymd.uix.screen import MDScreen
+from kivymd.uix.boxlayout import MDBoxLayout
+from kivymd.uix.button import MDFlatButton
+
+from kivymd.uix.dialog import MDDialog
+from kivymd.uix.picker import MDDatePicker
+from kivy.properties import StringProperty, ObjectProperty
+
+
+import backend.database as db
+from backend import utils
+from screens.sessionedit import EditScreen
+
+sessions = db.get_sessions()
+
+
+class SessionInfo:
+
+    def __init__(self, key, value) -> None:
+        self.key = key
+        self.date = utils.parse_date(value['date'], 'Day, Mon DD, YYYY')
+    
+
+# sessions = [
+#     {
+#     'key': k, 
+#     'date_str': utils.parse_date(v['date'], 'Day, Mon DD, YYYY'),
+#     'date_obj': datetime.fromisoformat(v['date']),
+#     'workout': 'lower' if not 'workout' in v else v['workout'],
+#     'lifts': 'Bench Press' if not 'lifts' in v else v['lifts']
+#     } 
+#     for k,v in sessions.items()]
+
+# sessions.reverse()
+# sessions = sessions[:5]
+
+class ViewSessionsScreen(MDScreen):
+    recycle_view = ObjectProperty()
+    box = ObjectProperty()
+
+    def __init__(self,  **kw):
+        super().__init__(**kw)
+        Clock.schedule_once(self._post_init)
+
+
+    def _post_init(self, dt):
+        sessions = db.get_sessions()
+        if sessions:
+            self.box.add_widget(RV(sessions))
+        else:
+            self.box.add_widget(Label(text='No data to display'))
+
+
+    def delete_all(self):
+        self.recycle_view.data.clear()
+        #Delete all sessions and their corresponding graph/lift data
+
+
+class MyButton(RecycleDataViewBehavior, MDCardSwipe):
+
+    index = None
+    date_str = StringProperty()
+    date_obj = ObjectProperty()
+    key = StringProperty()
+    workout = StringProperty() #Do I need these properties?
+
+    def __init__(self) -> None:
+        super().__init__()
+        self.dialogs = {}
+
+    def refresh_view_attrs(self, rv, index, data):
+        ''' Catch and handle the view changes '''
+        self.index = index
+        return super(MyButton, self).refresh_view_attrs(
+            rv, index, data)
+
+    
+    def launch_edit_screen(self,app):
+        manager = app.root.ids.data_sm
+        if not manager.has_screen(self.key):
+            manager.add_widget(
+                EditScreen(
+                    self.key, 
+                    self.date_str, 
+                    self.date_obj,
+                    self.workout,
+                    self.lifts,
+                    ))
+            
+        app.change_screen(
+            manager = manager, 
+            screen_name = self.key)
+
+
+    def show_confirm_dialog(self):
+        key = 'confirm'
+        if not key in self.dialogs:
+            self.dialogs[key] = MDDialog(
+                text='Are you sure you want to delete this session?',
+                buttons=[
+                    MDFlatButton(
+                        text="CANCEL",
+                        theme_text_color="Custom",
+                        on_release = functools.partial(self._close_dialog, key)
+                    ),
+                    MDFlatButton(
+                        text="PROCEED",
+                        theme_text_color="Custom",
+                        on_release = self._delete_session_info
+                    )
+                ]
+            )
+        self.dialogs[key].open()
+
+
+    def _close_dialog(self, key, instance=None):
+        self.dialogs[key].dismiss()
+
+    def _delete_session_info(self, *args):
+
+        # self.parent.remove_widget(self)
+        del self.parent.parent.data[self.index]
+        self._close_dialog('confirm')
+        db.delete_session(self.key)
+
+        for lift in self.lifts:
+            db.delete_completed_lift(self.key, lift)
+            db.delete_graph_data(self.key, lift)
+        
+    
+class RV(RecycleView):
+    def __init__(self, data, **kwargs):
+        super(RV, self).__init__(**kwargs)
+        self.data = data
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
deleted file mode 100644
index 0269658..0000000
--- a/requirements.txt
+++ /dev/null
@@ -1,43 +0,0 @@
-CacheControl==0.12.10
-cachetools==4.2.4
-certifi==2021.10.8
-charset-normalizer==2.0.9
-cycler==0.11.0
-docutils==0.18.1
-firebase-admin==5.1.0
-fonttools==4.29.1
-google-api-core==2.3.0
-google-api-python-client==2.33.0
-google-auth==2.3.3
-google-auth-httplib2==0.1.0
-google-cloud-core==2.2.1
-google-cloud-firestore==2.3.4
-google-cloud-storage==1.43.0
-google-crc32c==1.3.0
-google-resumable-media==2.1.0
-googleapis-common-protos==1.54.0
-grpcio==1.42.0
-grpcio-status==1.42.0
-httplib2==0.20.2
-idna==3.3
-Kivy==2.0.0
-Kivy-Garden==0.1.4
-kivymd==0.104.2
-kiwisolver==1.3.2
-matplotlib==3.5.1
-msgpack==1.0.3
-numpy==1.22.2
-packaging==21.3
-Pillow==8.4.0
-proto-plus==1.19.8
-protobuf==3.19.1
-pyasn1==0.4.8
-pyasn1-modules==0.2.8
-Pygments==2.10.0
-pyparsing==3.0.6
-python-dateutil==2.8.2
-requests==2.26.0
-rsa==4.8
-six==1.16.0
-uritemplate==4.1.1
-urllib3==1.26.7
diff --git a/session_log.txt b/session_log.txt
deleted file mode 100644
index 36d7406..0000000
--- a/session_log.txt
+++ /dev/null
@@ -1,27 +0,0 @@
-Jan 01, 2022
-Jan 03, 2022
-Jan 05, 2022
-Jan 09, 2022
-Jan 12, 2022
-Jan 17, 2022
-Jan 23, 2022
-Jan 25, 2022
-Jan 27, 2022
-Jan 29, 2022
-Feb 01, 2022
-Feb 02, 2022
-Feb 03, 2022
-Feb 05, 2022
-Feb 07, 2022
-Feb 09, 2022
-Feb 09, 2022
-Feb 12, 2022
-Feb 14, 2022
-Feb 16, 2022
-Feb 20, 2022
-Feb 21, 2022
-Feb 21, 2022
-Feb 26, 2022
-Feb 28, 2022
-Mar 01, 2022
-Mar 04, 2022
diff --git a/workout/backend/__pycache__/__init__.cpython-39.pyc b/workout/backend/__pycache__/__init__.cpython-39.pyc
deleted file mode 100644
index e9dfdb1..0000000
Binary files a/workout/backend/__pycache__/__init__.cpython-39.pyc and /dev/null differ
diff --git a/workout/backend/__pycache__/database.cpython-39.pyc b/workout/backend/__pycache__/database.cpython-39.pyc
deleted file mode 100644
index c7cc34f..0000000
Binary files a/workout/backend/__pycache__/database.cpython-39.pyc and /dev/null differ
diff --git a/workout/backend/__pycache__/datacarddata.cpython-39.pyc b/workout/backend/__pycache__/datacarddata.cpython-39.pyc
deleted file mode 100644
index c7070c7..0000000
Binary files a/workout/backend/__pycache__/datacarddata.cpython-39.pyc and /dev/null differ
diff --git a/workout/backend/__pycache__/utils.cpython-39.pyc b/workout/backend/__pycache__/utils.cpython-39.pyc
deleted file mode 100644
index ca13706..0000000
Binary files a/workout/backend/__pycache__/utils.cpython-39.pyc and /dev/null differ
diff --git a/workout/backend/session_log.txt b/workout/backend/session_log.txt
deleted file mode 100644
index caba127..0000000
--- a/workout/backend/session_log.txt
+++ /dev/null
@@ -1,61 +0,0 @@
-Jan 01, 2022
-Jan 03, 2022
-Jan 05, 2022
-Jan 09, 2022
-Jan 12, 2022
-Jan 17, 2022
-Jan 23, 2022
-Jan 25, 2022
-Jan 27, 2022
-Jan 29, 2022
-Feb 01, 2022
-Feb 02, 2022
-Feb 03, 2022
-Feb 05, 2022
-Feb 07, 2022
-Feb 09, 2022
-Feb 09, 2022
-Feb 12, 2022
-Feb 14, 2022
-Feb 16, 2022
-Feb 20, 2022
-Feb 21, 2022
-Feb 21, 2022
-Feb 26, 2022
-Feb 28, 2022
-Mar 01, 2022
-Mar 04, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 21, 2022
-Apr 24, 2022
-Apr 24, 2022
-Apr 24, 2022
-Apr 24, 2022
-Apr 24, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
-Apr 25, 2022
diff --git a/workout/kv/scratch.kv b/workout/kv/scratch.kv
deleted file mode 100644
index 190c449..0000000
--- a/workout/kv/scratch.kv
+++ /dev/null
@@ -1,221 +0,0 @@
-#:kivy 2.0.0
-
-MDScreen:
-    SessionScreen:
-
-<SessionScreen>:
-
-    toolbar: toolbar
-    layout: layout
-
-    MDBoxLayout:
-        orientation: "vertical"
-        
-        MDToolbar:
-            id: toolbar
-            left_action_items: [["chevron-left", lambda x: app.change_screen(manager=app.root.ids.workout_sm, screen_name='selection_screen', direction='right')]]
-            right_action_items: [["plus", lambda x: root._add_lift_dialog(), 'Add new lift'], ["check", lambda x: root.validate_record(), 'Log Lifts']]
-            specific_text_color: [.13,.13,.13,1]
-            halign: 'center'
-            elevation: 10
-        
-        ScrollView:
-            size_hint_y: None
-            height: root.height - toolbar.height
-            
-            MDBoxLayout:
-                id: layout
-                orientation: 'vertical'
-                size_hint_y: None
-                height: self.minimum_height
-                spacing: 5
-                padding: 5
-                
-                canvas:
-                    Color:
-                        rgba: .95, .57, .26, 1
-                    Rectangle:
-                        pos: self.pos
-                        size: self.size
-               
-
-<LiftCard>:
-
-    size_hint_y: None
-    height: 125 * (root.sets+1) + root.label_height #This can be improved. Self.minimum hieght and then move the height record rows
-    orientation: 'vertical'
-    label_height: 75
-
-    box: box
-    
-    Label:
-        text: root.lift
-        size_hint_y: None
-        height: root.label_height
-
-    MDSeparator:
-
-    MDBoxLayout:
-
-        id: box
-        orientation: 'horizontal'
-        
-                   
-<RecordLayout>:
-    size_hint: 1, 1
-    stack: stack
-    scroll_x: 1
-
-    MDStackLayout:
-        id: stack
-        orientation: 'tb-rl'
-        size_hint: None, 1
-        width: self.minimum_width
-        # pos_hint: {'center_x': .5}
-
-<RecordColumn>:
-    orientation: 'tb-rl'
-    size_hint: None, 1
-    width: 197
-    date: date
-    
-
-    MDLabel:
-        id: date
-        size_hint: 1, None
-        height: 115
-        halign: 'center'
-
-<RecordLabel>:
-    color: [.74,.74,.74,1]
-    size_hint_y: None
-    height: 125
-
-
-<ColumnSpacer>:
-    size_hint: None, 1
-    width: 197
-
-<NoData>:
-    size_hint: None, 1
-    
-    Label:
-        text: "No Data to Display"
-        color: [.74,.74,.74,1]
-
-<LoadMore>:
-    size_hint: None, 1
-    width: 50
-    padding: 5
-    spacing: 5
-
-
-    canvas.before:
-        # Color:
-        #     rgba: .95, .57, .26, 1
-        # Line:
-        #     width: 2
-        #     rectangle: self.x, self.y, self.width, self.height
-        #     # pos: self.pos
-        #     # width: 3
-        
-        PushMatrix
-        Rotate:
-            angle: 90
-            origin: self.center
-    canvas.after:
-        PopMatrix
-    
-
-    Label:
-        color: .95, .57, .26, 1
-        text: "Load More"
-        halign: "center"
-        valign: "center"
-        pos_hint: {'center_x': .5, 'center_y': .5}
-
-
-<InputLayout>:
-    orientation: 'tb-rl'
-    size_hint_x: .25
-    layout: layout
-
-    MDRelativeLayout:
-        id: layout
-        adaptive_height: True
-
-        MDIconButton:
-            icon: 'check'
-            on_press: root.validate()
-            size_hint_y: None
-            height: 125
-            pos_hint: {'center_x': .4}
-
-<InputRow>:
-    orientation: 'horizontal'
-    size_hint_y: None
-    height: 125
-    reps: rep_field.text
-    weight: weight_field.text
-
-    rep_field: rep_field
-    weight_field: weight_field
-    
-
-    MDTextField:
-        hint_text: '#'
-        id: rep_field
-
-    MDTextField:
-        hint_text: 'lbs'
-        id: weight_field
-
-
-<AddLiftDialog>:
-    orientation: 'vertical'
-    size_hint_y: None
-    height: '300dp'
-    # height: self.minimum_height
-
-    box: box
-
-    ScrollView:
-        MDBoxLayout:
-            orientation: 'vertical'
-            size_hint_y: None
-            height: self.minimum_height
-            id: box
-            spacing: "12dp"
-            
-    
-<AddLiftDialogRow>:
-    orientation: 'horizontal'
-    size_hint_y: None
-    height: self.minimum_height
-    
-    sets: input.text
-    check: check
-    input: input
-
-    ItemConfirm:
-        text: root.lift
-        on_release: root.set_icon(check, input)
-        divider: None
-    
-        LeftCheckbox:
-            id: check
-            active: False
-            # on_active: root.set_icon(check, input)
-
-    CreateWorkoutSetsInput:
-        id: input
-        hint_text: "# sets"
-        size_hint_x: 0
-        disabled: True
-
-
-<LeftCheckbox@ILeftBodyTouch+MDCheckbox>:
-     
-<ItemConfirm@OneLineAvatarIconListItem>:
-
-<CreateWorkoutSetsInput@MDTextField>:
diff --git a/workout/screens/__pycache__/__init__.cpython-39.pyc b/workout/screens/__pycache__/__init__.cpython-39.pyc
deleted file mode 100644
index a5794ad..0000000
Binary files a/workout/screens/__pycache__/__init__.cpython-39.pyc and /dev/null differ
diff --git a/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc b/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc
deleted file mode 100644
index 918f460..0000000
Binary files a/workout/screens/__pycache__/_sessionscreen.cpython-39.pyc and /dev/null differ
diff --git a/workout/screens/__pycache__/sessionscreen.cpython-39.pyc b/workout/screens/__pycache__/sessionscreen.cpython-39.pyc
deleted file mode 100644
index 30be6f3..0000000
Binary files a/workout/screens/__pycache__/sessionscreen.cpython-39.pyc and /dev/null differ
diff --git a/workout/screens/dialogcontent.py b/workout/screens/dialogcontent.py
deleted file mode 100644
index 7a8a270..0000000
--- a/workout/screens/dialogcontent.py
+++ /dev/null
@@ -1,7 +0,0 @@
-# from kivymd.uix.boxlayout import MDBoxLayout
-# from kivy.properties import ObjectProperty, StringProperty
-# import database as db
-
-# #Probably could be refactored
-
-
